from flask import Flask, render_template, request, redirect, url_for
import sqlite3
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
login_manager =LoginManager(app)
login_manager.login_view = 'login'

class User(UserMixin):
    def __init__(self, id, username, password_hash):
        self.id = id
        self.username = username
        self.password_hash = password_hash

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

@login_manager.user_loader
def load_user(user_id):
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    user = cursor.execute(
                'SELECT * FROM user WHERE id = ?', (user_id)).fetchone()
    if user is not None:
        return User(user[0], user[1], user[2])
    return None


def close_db(connection=None):
    if connection is not None:
        connection.close()


@app.teardown_appcontext
def close_connection(exception):
    close_db()

@app.route('/add_post/', methods=['GET', 'POST'])
@login_required
def add_post():
    if request.method =='POST':
        title = request.form['title']
        content = request.form['content']
        connection = sqlite3.connect('sqlite.db', check_same_thread=False)
        cursor = connection.cursor()
        cursor.execute(
            'INSERT INTO Post (Title, Content, author_id) VALUES (?, ?, ?)',
            (title,content, current_user.id)
        )
        connection.commit()
        return redirect(url_for('index'))
    return render_template('add.html')

@app.route('/delete/<int:post_id>', methods=['POST'])
@login_required
def delete_post(post_id):
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    post = cursor.execute('SELECT * FROM post WHERE id = ?', (post_id,)).fetchone()
    if post and post[3] == current_user.id:
        cursor.execute('DELETE FROM Post WHERE id = ?', (post_id))
        return redirect(url_for('index'))
    else:
        return redirect(url_for('index'))


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        try:
            connection = sqlite3.connect('sqlite.db')
            cursor = connection.cursor()
            cursor.execute('INSERT INTO user (username,password_hash, email) VALUES (?,?,?)',(username, generate_password_hash(password), email)
            )
            connection.commit()
            print('The registration has been succeeded')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            return render_template('register.html', message='Username already exists!')
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    print(request.method)
    if request.method =='POST':
        username = request.form['username']
        password = request.form['password']
        connection = sqlite3.connect('sqlite.db', check_same_thread=False)
        cursor = connection.cursor()
        user = cursor.execute(
            "SELECT * FROM user WHERE username = ?", (username,)
            ).fetchone()
        if user and User(user[0], user[1], user[2]).check_password(password):
            login_user(User(user[0],user[1],user[2]))
            return redirect(url_for('index'))
        else:
            return render_template('login.html', message='Invalid username or password')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))


@app.route('/')
def index():
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    cursor.execute('''
    SELECT
        post.id,
        post.title,
        post.content,
        post.author_id,
        user.username,
        COUNT(like.id) AS likes
    FROM
       post
    JOIN
        user ON post.author_id = user.id
    LEFT JOIN
        like ON post.id = like.post_id
    GROUP BY
        post.id, post.title, post.content, post.author_id, user.username
    ''')
    result = cursor.fetchall()
    posts = []
    for post in reversed(result):
        posts.append({'id': post[0], 'title': post[1], 'content': post[2], 'author_id': post[3], 'username': post[4], 'likes': post[5]})
        if current_user.is_authenticated:
            cursor.execute('SELECT post_id FROM like WHERE user_id = ?', (current_user.id,))
            likes_result = cursor.fetchall()
            liked_post = []
            for like in likes_result:
                liked_post.append(int(like[0]))
            posts[-1]['liked_posts'] = liked_post
    context = {'posts': posts}
    return render_template('blog.html', **context)

@app.route('/post/<post_id>')
def post(post_id):
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    post = cursor.execute(
        'SELECT * From post JOIN user ON post.author_id = user.id WHERE post.id = ?', (post_id,)
    ).fetchone()
    print(post)
    post_info = {'id': post[0], 'title': post[1], 'content':post[2], 'author_id': post[3], 'username':post[5], 'email':post[7]}
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    cursor.execute('''
        SELECT * FROM comments JOIN user ON comments.user_id = user.id WHERE comments.post_id = ?
        ''', (post_id,))
    result = cursor.fetchall()
    comments = []
    for post in reversed(result):
        comments.append({'content': post[0], 'user_id': post[1], 'post_id': post[2], 'username': post[4]})
    return render_template('post.html',post = post_info,comments=comments)

def user_is_liking(user_id, post_id):
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    like = cursor.execute('SELECT * FROM like WHERE user_id = ? AND post_id = ?',(user_id, post_id)).fetchone()
    return bool(like)

@app.route('/like/<int:post_id>')
@login_required
def like_post(post_id):
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    post = cursor.execute('SELECT * FROM post WHERE id = ?', (post_id,)).fetchone()
    if post:
        if user_is_liking(current_user.id, post_id):
            cursor.execute('DELETE FROM like WHERE user_id = ? AND post_id = ?', (current_user.id, post_id))
            connection.commit()
            print('You have unliked this post.')
        else:
            cursor.execute('INSERT INTO like (user_id, post_id) VALUES (?, ?)',(current_user.id, post_id))
            connection.commit()
            print('You have liked this post!')
        return redirect(url_for('index'))
    return 'Post not found', 404

@app.route('/add_comment/<int:post_id>', methods=['GET', 'POST'])
@login_required
def add_comment(post_id):
    if request.method =='POST':
        content = request.form['content']
        connection = sqlite3.connect('sqlite.db', check_same_thread=False)
        cursor = connection.cursor()
        cursor.execute(
            'INSERT INTO comments (content, user_id, post_id) VALUES (?, ?, ?)',
            (content, current_user.id, post_id)
        )
        connection.commit()
        return redirect(url_for('index'))
    return render_template('add_comment.html')

@app.route("/test/<int:post_id>")
def comment1(post_id):
    print(post_id)
    connection = sqlite3.connect('sqlite.db', check_same_thread=False)
    cursor = connection.cursor()
    cursor.execute('''
    SELECT * FROM comments JOIN user ON comments.user_id = user.id WHERE comments.post_id = ?
    ''', (post_id, ))
    result = cursor.fetchall()
    comments = []
    for post in reversed(result):
        comments.append({'content': post[0], 'user_id': post[1], 'post_id': post[2],'username':post[4]})
    return render_template('comment.html', comments=comments)


if __name__ == "__main__": #Условие __name__ == '__main__' означает, что сервер работает только в том случае, если программа запускается напрямую, а не импортируется как модуль
    app.run()
